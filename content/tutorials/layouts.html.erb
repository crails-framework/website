---
title: "Crails Framework: Layout and rendering"
---

<div id="with-index"></div>

<h2>1. Rendering</h2>
<h3>1.1 Creating a view</h3>
<p>
  Crails views are created from a view template, stored in the <code>app/views</code> folder.
  They are then compiled to C++ using a code generator defined in the <code>Guardfile</code>, and
  can then be rendered from your application.
</p>

<p>
  Templates can exist in several formats: HTML and JSON support can be added to your application
  by installing the <b>crails-html</b> and <b>crails-json</b> modules, using the 
  <code>crails module html install</code> abd <code>crails module json install</code>.
</p>

<p>
  Create the file <code>app/views/home/index.html</code> as following:
</p>

<%= html_block <<HTML
<p>Hi HTML template !</p>
HTML
%>

<p>
  You may compile your template by calling the <code>crails build</code> command, which will run
  all the code generators.
</p>

<h3>1.2 Rendering a view</h3>
<p>
  Views are typically rendered from a controller, using the <code>Crails::Controller::render</code> method,
  as following:
</p>

<%= code_block <<HTML
#ifndef  HOME_CONTROLLER_HPP
# define HOME_CONTROLLER_HPP

# include <crails/controller.hpp>

class HomeController : public Crails::Controller
{
public:
  HomeController(Crails::Context& context) : Crails::Controller(context)
  {}

  void index()
  {
    render("home/index"); // will render app/views/home/index.ecpp
  }
};

#endif
HTML
%>

<div class="hint-box">
  The controller's renderer uses the request's <code>Accept</code> header to determine which renderer to use. If no
  template were provided for any of the formats specified in the <code>Accept</code> header, the
  <code>Crails::MissingTemplate</code> exception will be thrown.
</div>

<p>
  You can also directly render a template using a <i>Renderer</i> directly. For the <i>HtmlRenderer</i>, here's how
  we would proceed:
</p>

<%= code_block <<CPP
#ifndef  HOME_CONTROLLER_HPP
# define HOME_CONTROLLER_HPP

# include <crails/controller.hpp>
# include <crails/renderers/html_renderer.hpp>

class HomeController : public Crails::Controller
{
public:
  HomeController(Crails::Context& context) : Crails::Controller(context)
  {}

  void index()
  {
    Crails::HtmlRenderer().render_template("home/index", this->response);
  }
};

#endif
CPP
%>

<p>
  Instead of relying on the controller's renderer, we explicitely instantiate an <i>HtmlRenderer</i>
  and call <i>render_template</i>, which takes two parameters: the template's name, and the target
  in which the view will be rendered.
</p>

<h3>1.3 Rendering a view to a string</h3>
<p>
  The previous method renders the view directly to the HTTP response object. But you may also want to
  render a view without necessarily sending it as a response. In the following example, we'll store the
  result in a <code>RenderString</code> before setting a response:
</p>

<%= code_block <<CPP
void index()
{
  Crails::RenderString result;

  Crails::HtmlRenderer().render_template("home/index", result);
  response.set_body(result.value().data(), result.value().length());
}
CPP
%>

<p>
  <code>RenderString::value()</code> returns a <code>std::string_view</code> containing the
  rendered view.
</p>

<h2>2. Templates</h2>
<h3>2.1 Linking section</h3>
<p>
  View templates may start with a <i>linking section</i>, delimited by the <code>// END LINKING</code> separator.
  This section is where you will declare include <i>files, namespaces, typedefs and variables</i> required by your template.
</p>

<%= html_block <<HTML
using namespace std;

string message = "Hi HTML template !";
// END LINKING
<p><%= message %%></p>
HTML
%>

<p>
  In this example, we declare a local stirng variable named <code>message</code>, and initialize it with
  a default value. We then render that string within the view using the <code>&lt;%= ... %&gt;</code>
  delimiters.
</p>

<div class="hint-box">
  You should not try to use the preprocessor from the linking section.
</div>

<h3>2.2 Shared variables</h3>
<p>
  Views can import variables from other contexts in the <i>linking section</i> of a template.
  Let's now edit our previous template to import the value of the <code>message</code> variable from
  another context:
</p>

<%= html_block <<HTML
using namespace std;

string @message = "Hi HTML template !";
// END LINKING
<p><%= message %%></p>
HTML
%>

<p>
  In this example, we added an <code>@</code> character before the variable's name. This means that
  this variable's value should be provided by the renderer.
</p>

<p>
  If the renderer doesn't provide the variable, then the default initializer will be used, and our message
  will be "Hi HTML template !".
</p>

<div class="hint-box">
  Note that if we do not provide a default initializer to a shared variable, then trying to render the template
  without providing a value for the variable will result in an <i>out_of_range</i> exception.<br/>
  Similarly, if you provide a value to the variable, but the typeid does not match the one used in the template,
  a <i>runtime_error</i> exception will be thrown.
</div>

<h3>2.3 Sharing variables with a view</h3>
<p>
  When rendered from a Crails controller, views will use the controller's
  shared variable set by default, which is accessible from the controller as
  <code>Crails::Controller::vars</code>.
</p>

<p>
  Here's the simplest way to share variables with a view:
</p>

<%= code_block <<HTML
#ifndef  HOME_CONTROLLER_HPP
# define HOME_CONTROLLER_HPP

# include <crails/controller.hpp>

class HomeController : public Crails::Controller
{
public:
  HomeController(Crails::Context& context) : Crails::Controller(context)
  {}

  void index()
  {
    vars["message"] = "Howdy, little birdie !";
    render("home/index");
  }
};

#endif
HTML
%>

<p>
  Note that in this example, <code>"Howdy, little birdie !"</code> has the <code>const char*</code>
  type, which does not match the variable <code>std::string</code> type we set for the <i>message</i>
  variable in our template.<br/>
  With any other types, this would be a mistake: you need to be careful that the rvalue you assign
  to a shared variable is exactly the same as the template's. However, Crails will automatically
  convert between <code>std::string</code>, <code>std::string_view</code> and <code>const char*</code>,
  making this example valid.
</p>

<p>
  Here is another way to pass variables to a view:
</p>

<%= code_block <<HTML
#ifndef  HOME_CONTROLLER_HPP
# define HOME_CONTROLLER_HPP

# include <crails/controller.hpp>

class HomeController : public Crails::Controller
{
public:
  HomeController(Crails::Context& context) : Crails::Controller(context)
  {}

  void index()
  {
    render("home/index", {
      {"message", "Howdy, little birdie !"}
    });
  }
};

#endif
HTML
%>

<p>
  In this example, we send our variables directly to the controller's renderer. The controller's own variable
  will still be shared with the views, but the variables sent as parameter will also be available. When some
  variable names overlap, the ones sent as parameters will override the controller's.
</p>

<h3 id="partial-rendering">2.4 Partial rendering</h3>
<p>
  With more complex application, you may end up needing to render views within other views. This can be
  done through partial rendering:
</p>

<%= html_block <<HTML
using namespace std;

string message = "Hi HTML template !";
// END LINKING
<h1><%= message %%></h1>
<%= partial("home/partial"); %%>
HTML
%>

<p>
  You may also need to send custom variables to the partial view. This can easily be achieved using the
  optional second parameter for the <i>partial</i> method:
</p>

<%= html_block <<HTML
using namespace std;

string message = "Hi HTML template !";
// END LINKING
<h1><%= message %%></h1>
<%= partial("home/partial", {{"variable", message.length()}); %%>
HTML
%>

<h2>3. Layouts</h2>
<h3>3.1 Creating a layout</h3>
<p>
  Layouts are a simple helper that you can use to have all the views from a controller be rendered
  within a layout view. Here's what a layout view may look like:
</p>

<%= html_block <<HTML
const char* @yield;
// END LINKING
<html>
  <head>
    <title>My application</title>
  </head>
  <body>
    <%= yield %%>
  </body>
</html>
HTML
%>

<p>
  Layout template are provided with a <i>yield</i> shared variable, which will contain a rendered
  view that you can incorporate within the layout.
</p>

<div class="hint-box">
  In addition to the <i>yield</i> variable, the layout also gets access to all the shared variables
  sent to the view you're rendering. 
</div>

<h3>3.2 Setting a default layout</h3>
<p>
  Each controller can set a default layout by setting the <i>layout</i> shared variable, as such:
</p>

<%= code_block <<HTML
#ifndef  HOME_CONTROLLER_HPP
# define HOME_CONTROLLER_HPP

# include <crails/controller.hpp>

class HomeController : public Crails::Controller
{
public:
  HomeController(Crails::Context& context) : Crails::Controller(context)
  {
    vars["layout"] = "home/my_layout";
  }

  void index()
  {
    render("home/index");
  }
};

#endif
HTML
%>

<p>
  Alternatively, you can also provide or override the layout by sending a variable directly to the renderer:
</p>

<%= code_block <<HTML
  void index()
  {
    render("home/index", {
      {"layout", "home/my_layout"}
    });
  }
HTML
%>
