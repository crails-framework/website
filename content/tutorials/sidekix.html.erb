---
title: Sidetasks
---

<div id="with-index"></div>

<h2>1. Introduction</h1>

<p>
  Sidetasks are parts of your application that can run in a separate process,
  independently from the web application. They can be scheduled to run at a
  later time, and will persist even as the server restarts.
</p>

<p>
  In this tutorial, we'll use the <code>sidekix</code> to see how we can
  add sidetasks in our application.
</p>

<h3>1.1 Guide assumptions</h3>

<p>
  This guide will be using the <code>sync</code> plugin to follow the progress
  of sidetasks. You may want to take the <a href="/tutorials/sync#task-progression">Task Progression</a>
  tutorial first.
</p>

<h3>1.2 Preparation</h3>

<p>
  Create an application with the following command:
</p>

<pre>
$ crails new -n scheduletask -p html
$ cd scheduletask
</pre>

<p>
  Then, add the sidekix and sync plugins:
</p>

<pre>
$ crails plugins sidekix install
$ crails plugins sync install
</pre>

<p>
  Add a layout:
</p>

<pre>
$ crails scaffold layout --toolkit bootstrap
</pre>

<p>
  Lastly, we'll use the <code>task/show</code> view from the <a href="/tutorials/sync#task-progression">Task Progression</a>
  tutorial:
</p>

<pre class="filepath">app/views/task/show.html</pre>
<%= html_block <<HTML
std::string @task_uri;
std::string @task_id;
// END LINKING
<h1>Task Watcher</h1>
<h3>Watching task <%= task_id %%></h3>

<div class="progress">
  <div id="progress-bar" class="progress-bar" role="progressbar">
    0/0
  </div>
</div>

<script>
  const socket = new WebSocket("ws://0.0.0.0:3001/<%= task_uri %%>");
  socket.onmessage = event => {
    const metadata = JSON.parse(event.data);
    const percents = metadata.progress * 100;
    const progressBar = document.querySelector("#progress-bar");

    progressBar.textContent = `${metadata.item_progress}/${metadata.item_count}`;
    progressBar.style.width = `${Math.ceil(percents)}%`;
  };
</script>
HTML
%>

<h2>2. Sidetasks</h2>

<h3>2.1 Creating a sidetask</h3>
<p>
  Let's first create a sidetask. The <code>sidekix</code> provides a command to set up
  new tasks:
</p>

<pre>
$ crails plugins sidekix add-task --name my-sidetask
</pre>

<p>
  This will generate a source file for our task, which will export a function called
  <code>my_sidetask</code>.
</p>

<p>
  We'll open that file and implement our side task:
</p>

<pre class="filepath">tasks/sidekix/sidetasks/my_sidetask.cpp</pre>
<%= code_block <<CPP
#include <crails/params.hpp>
#include <crails/sync/task.hpp>
#include <crails/logger.hpp>
#include <unistd.h> // provides usleep

using namespace std;
using namespace Crails;

void my_sidetask(Crails::Params& params)
{
  string task_scope = "sidetask";
  string task_uid = params["sidekix"]["task_uid"];
  unsigned int step_count = 100;
  Sync::Task progress(task_scope, task_uid, step_count);

  logger << "Starting sidetask" << Logger::endl;
  while (step_count--)
  {
    usleep(25000);
    progress.increment();
  }
  logger << "Done with sidetask" << Logger::endl;
}
CPP
%>

<h3>2.2 Invoking a sidetask</h3>

<p>
  We shall now instructs sidekix to run our task. Create
  the following controller:
</p>

<pre class="filepath">app/controllers/sidetask.hpp</pre>
<%= code_block <<CPP
#pragma once
#include "application.hpp"
#include <crails/sidekix.hpp>

class SidetaskController : public ApplicationController
{
public:
  SidetaskController(Crails::Context& context) :
    ApplicationController(context)
  {
  }

  void index()
  {
    std::string task_id;

    task_id = Sidekix::async_task("my-sidetask");
    vars["layout"] = std::string("layouts/application");
    vars["task_id"] = task_id;
    vars["task_uri"] = "sidetask/" + task_id;
    render("task/show");
  }
};
CPP
%>

<p>
  Let's create the matching routes for the <code>index</code> action and the <code>sidetask/:task_uid</code>
  channel we just defined in our controller:
</p>

<pre class="filepath">app/routes.cpp</pre>
<%= code_block <<CPP
#include <crails/router.hpp>
#include <crails/sync/channel_actions.hpp>
#include "controllers/sidetask.hpp"

void Crails::Router::initialize()
{
  match_action("GET", "/sidetask", SidetaskController, index);
  match_sync_task("sidetask/:task_uid");
}
CPP
%>

<p>
  Build your server and go to <a href="http://localhost:3001/sidetask">http://localhost:3001/sidetask</a>: you
  should witness the task progression.
</p>

<h3>2.3 Sending parameters to a sidetask</h3>

<p>
  Sidetasks can also use parameters. And we will use that feature by setting
  the number of steps in our tasks in the controller. Open the controller file
  and update the index method as such:
</p>

<pre class="filepath">app/controllers/sidetask.hpp</pre>
<%= code_block <<CPP
...
  void index()
  {
    std::string task_id;
    DataTree task_parameters;

    task_parameters["step_count"] = 42;
    task_id = Sidekix::async_task("my-sidetask", task_parameters);
    ...
  }
...
CPP
%>

<p>
  We've sent the <code>step_count</code> parameter to the asynchronous task: now
  let's use that parameter in the sidetask. Open the sidetask source file:
</p>

<pre class="filepath">tasks/sidekix/sidetasks/my_sidetask.cpp</pre>
<%= code_block <<CPP
...
void my_sidetask(Crails::Params& params)
{
  string task_scope = "sidetasks";
  string task_uid = params["sidekix"]["task_uid"];
  // We can access our step_count parameter as such:
  unsigned int step_count = params["step_count"].as<int>();
  Crails::Sync::Task progress(task_scope, task_uid, step_count);

  while (step_count--)
  {
    usleep(250);
    progress.increment();
  }
}
CPP
%>

<h2>3. Task scheduling</h2>

<h3>3.1 Schedule in</h3>
<p>
  A big interest of asynchronous task is the ability to schedule those
  to run at a specific time. To do so, we replace <code>async_task</code>
  with <code>schedule_task_in</code>:
</p>

<pre class="filepath">app/controllers/sidetask.hpp</pre>
<%= code_block <<CPP
#pragma once
#include <chrono> // add chrono for time operations
#include <crails/sidekix.hpp>
#include "application.hpp"

class SidetaskController : public ApplicationController
{
public:
  SidetaskController(Crails::Context& context) :
    ApplicationController(context)
  {
  }

  void index()
  {
    using namespace std::literals::chrono_literals;
    DataTree task_parameters;
    std::string task_id;

    task_parameters["step_count"] = 42;
    task_id = Sidekix::schedule_task_in(
      1m + 30s,
      "my-sidetask",
      task_parameters
    );
    vars["layout"] = std::string("layouts/application");
    vars["task_id"] = task_id;
    vars["task_uri"] = "sidetask/" + task_id;
    render("task/show");
  }
};
CPP
%>

<p>
  With this change, the task will run 10 seconds after the query is performed.
</p>

<h3>3.2 Schedule at</h3>
<p>
  You may also want to schedule a task at a specific time. This is done by
  using the <code>schedule_task</code> function:
</p>

<pre class="filepath">app/controllers/sidetask.hpp</pre>
<%= code_block <<CPP
...
  void index()
  {
    using namespace std::literals::chrono_literals;
    DataTree task_parameters;
    std::string task_id;

    task_parameters["step_count"] = 42;
    task_id = Sidekix::schedule_task(
      std::chrono::system_clock::now() + 10s,
      "my-sidetask",
      task_parameters
    );
    ...
  }
...
CPP
%>

<div class="hint-box">
  The <code>schedule_task</code> and <code>schedule_task_in</code> functions also
  support <code>std::time_t</code> as a parameter, instead of chrono's time points
  and durations.
</div>

<h2>4. Settings</h2>

<p>
  Using the <code>config/sidekix.cpp</code> file, you can configure the backends
  used by Sidekix to store pending tasks.
</p>

<p>
  By default, the initialization code looks like this:
</p>

<pre class="filepath">config/sidekix.cpp</pre>
<%= code_block <<CPP
...
static const string task_store_directory = ".pending-tasks";

SideTaskDatabase* SideTaskDatabase::initialize()
{
  if (Crails::environment == Crails::Test)
    return new Tests::Database();
  return new FileDatabase(task_store_directory);
}
CPP
%>

<p>
  It is a simple setup that configure a dummy database when running from
  the Test environment, or a file-based database otherwise.
</p>

<h3>4.1 File database</h3>

<p>
  The default backend for Sidekix is a file-based backend: tasks are stored
  as files, and fetched from the filesystem by the task runner.
</p>

<p>
  You can customize the path of the folder in which the tasks will be recorded
  as such:
</p>

<%= code_block <<CPP
...

SideTaskDatabase* SideTaskDatabase::initialize()
{
  return new Crails::Sidekix::FileDatabase("/usr/local/share/my-pending-tasks");
}
CPP
%>

<h3>4.2 Redis database</h3>

<p>
  If you've added a Redis database to your application with the following command:
</p>

<pre>$ crails plugins redis install</pre>

<p>
  Then you may use the Redis backend for Sidekix tasks. The Redis backend is far more
  appropriate: when running multiple instances of your application on several
  machines, your sidetasks will be distributed accross all the instances, rather than
  only visible on the one instance that had scheduled them.
</p>

<p>
  If you have a Redis database configured in your <code>config/databases.cpp</code> file,
  you can set up a Redis-backed sidetask database as such:
</p>

<%= code_block <<CPP
...
SideTaskDatabase* SideTaskDatabase::initialize()
{
  if (Crails::environment == Crails::Test)
    return new Tests::Database();
  return new RedisDatabase();
}
CPP
%>

<h4>4.2.1 Configure the database used</h4>
<p>
  <code>RedisDatabase()</code> will use the default <code>redis</code> database configured in your <code>config/databases.cpp</code>
  file. You can also setup a different configured database as such:
</p>

<%= code_block <<CPP
  return new RedisDatabase("alternative-redis-db");
CPP
%>

<h4>4.2.2 Configure the storage key</h4>
<p>
  By default, the sidetasks will be stored in a sorted list with the key <code>sidekix-task</code>, but
  you can also configure this:
</p>

<%= code_block <<CPP
  return new RedisDatabase("redis", "my-custom-key");
CPP
%>

<h2>5. Testing</h3>
<p>
  When writing your application tests, you might want to check whether your
  tasks have been scheduled properly. This is why a dummy backend is used
  in the test environment, which you can interact with by getting a pointer
  to the <code>TestDatabase</code>:
</p>

<%= code_block <<CPP
  auto* database = reinterpret_cast<Crails::Sidekix::TestDatabase*>(
    Crails::Sidekix::SideTaskDatabase::instance()
  );
CPP
%>

<p>
  With this pointer, you can perform several operations to check whether
  your tasks have been properly added:
</p>

<%= code_block <<CPP
  // Check that my-sidetask has been scheduled:
  EXPECT(database->has_task("my-sidetask"), ==, true);

  // Check that my-sidetask has been scheduled a specific amount of times
  EXPECT(database->count("my-sidetask"), ==, 12);

  // Check that my-sidetask has been scheduled at a specific time
  EXPECT(database->scheduled_at("my-sidetask", timestamp), ==, true))
CPP
%>
