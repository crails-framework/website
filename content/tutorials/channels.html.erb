---
title: Channels and message broadcasting
---

<div id="with-index"></div>

<h2>1. Introduction</h2>

<p>
  In the following tutorial, we'll learn how to use the <b>sync</b> plugin to create a simple chat-room application.<br/>
  You could achieve a similar result using plain <i>WebSockets</i> (see the <a href="/tutorials/websockets">WebSocket tutorial</a>).
  But in this tutorial, we'll take a different approach, and use Crails' <i>Channels</i>.
</p>

<p>
  Channels are based on WebSocket, and allow both the server and each client to broadcast messages to both the server
  and every other connected client. The read/write access of each channel can also be restricted depending on the user.
  Sounds perfect for a chat application ! Let's dive in !
</p>

<h3>1.1 Preparations</h3>

<p>
  Create the <code>chatnnel</code> application with the following command:
</p>

<pre>$ crails new -n chatnnel -p html
cd chatnnel</pre>

<p>
  Then add the <code>sync</code> plugin to the application:
</p>

<pre>$ crails plugins sync install</pre>

<h2>2. Public chatroom</h2>

<h3>2.1 HTML</h3>

<p>
  We'll start by creating a simple view to render our chatroom.
</p>

<pre class="filepath">app/views/chatroom.html</pre>
<%= html_block <<HTML
std::string @room_id;
// END LINKING
<html>
  <head>
    <meta charset="utf-8" />
    <title>Chatnell room - <%= room_id %%></title>
  </head>
  <body data-room-id="">
    <h1>Chatnnel room</h1>
    <h2><%= room_id %%></h2>

    <textarea placeholder="Write your message..."></textarea>
    <button id="send-button">Send</button>

    <table>
      <tbody id="message-container">
      </tbody>
    </table>
  </body>
</html>
HTML
%>

<p>
  Pretty simple stuff: a textarea to input text, and a table to display the message received.
</p>

<p>
  We also declared a <code>room_id</code> shared property: that's because we are going to allow
  the application to host as many rooms as the user may create.
</p>

<h3>2.2 JavaScript</h3>

<p>
  We also need some JavaScript to connect to the channel and update the message list. This is achieved
  using <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket" target="_blank">WebSockets</a>.
  Open our html view again and add the following javascript below the &lt;table&gt; element:
</p>

<pre class="filepath">app/views/chatroom.html</pre>
<%= html_block <<HTML
    <script>
      const socket = new WebSocket("ws://localhost:3001/chatroom/<%= room_id %%>/channel");
      socket.onmessage = function(event) {
        const list = document.querySelector("#message-container");
        const row = document.createElement("tr");
        const messageCell = document.createElement("td");
        messageCell.textContent = event.data;
        row.appendChild(messageCell);
        list.prepend(row);
      };

      document.querySelector("#send-button").addEventListener("click", function() {
        const input = document.querySelector("textarea");
        const message = input.value;
        socket.send(message);
        input.value = "";
      });
    </script>
HTML
%>

<p>
  Simple stuff again: we connect a chatroom to the <code>/chatroom/:room_id/channel</code> UID, which
  we will bind later in our application's router. When the user press the button, we send the textarea
  content to the WebSocket, and when the WebSocket sends us a message, we add a new row to <i>#message-container</i>
  displaying the received message.
</p>

<div class="hint-box">
  Messages sent to a channel are broadcasted to every connected client, including the one who sent
  the message. Hence why we don't need to append the message in the button <code>click</code> event handler: it will
  be appended when it comes back through the WebSocket's <code>message</code> event handler.
</div>

<h3>2.2 Controller</h3>

<p>
  At this point, the chatroom client is almost ready: we just need a simple controller to render the HTML we
  created earlier. Generate a basic controller using the following command:
</p>

<pre>$ crails scaffold controller -n chatroom</pre>

<p>
  Then declare a <code>show</code> action method:
</p>

<pre class="filepath">app/controllers/chatroom.hpp</pre>
<%= code_block <<CPP
#pragma once
#include "app/controllers/application.hpp"

class ChatroomController : public ApplicationController
{
public:
  ...

  // Declare the show action:
  void show();
};
CPP
%>

<p>
  And add the corresponding implementation in the controller source file:
</p>

<pre class="filepath">app/controllers/chatroom.cpp</pre>
<%= code_block <<CPP
#include "chatroom.hpp"
#include <crails/params.hpp>

...

void ChatroomController::show()
{
  render("chatroom", {
    {"room_id", params["room_id"].as<std::string>()}
  });
}
CPP
%>

<h3>2.3 Router</h3>

<p>
  Lastly, we need to two routes to our router: one to serve the chatroom html,
  the other to serve as the endpoint for the client's WebSockets:
</p>

<pre class="filepath">app/routes.cpp</pre>
<%= code_block <<CPP
#include <crails/router.hpp>
#include <crails/sync/channel_actions.hpp> // header for channel routes
#include "controllers/chatroom.hpp" // our controller

void Crails::Router::initialize()
{
  match_action("GET", "/chatroom/:room_id", ChatroomController, show);
  match_sync_channel("/chatroom/:room_id/channel", Crails::Sync::ChannelClient);
}
CPP
%>

<p>
  And we're done ! Build and start the server, then go at <a href="http://localhost:3001/chatroom/test-room" target="_blank">http://localhost:3001/chatroom/test-room</a> to try it out !
</p>

<h2>3. Idenitfy clients</h2>

<p>
  In our current implementations, messages are broadcasted to each client, but there are no way to tell who emitted which messages. In this chapter,
  we'll update our chatroom application so that each client is identified with a username.
</p>

<h2>4. Private chatroom</h2>

<p>
  All our chatrooms are publicly accessible. But what if you want your channels to be only accessible to some users ? Channels can be protected
  so that users cannot read or/and write, using passwords.
</p>
