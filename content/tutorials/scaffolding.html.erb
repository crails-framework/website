---
title: Scaffolding with Crails Framework
---

<div id="with-index"></div>

<h2>1. What is scaffolding in Crails ?</h2>

<p>
  Scaffolding is a simple way to generate a temporary structure for your Crails project. It is available through
  the Crails command line interface, and is typically used to generate new model, views and controllers.
</p>

<h3>1.0 Assumptions</h3>

<p>
  This tutorial assumes that you're running an application with the odb database backend and using
  the html format. You can create such an application using the following command:
</p>

<%= code_block <<BASH
  crails new -n scaffold_test -d sqlite -p html
BASH
%>

<h3>1.1 How to use the scaffold command</h3>

<p>
  An example for scaffolding a blog project would look like this:
</p>

<%= code_block <<BASH
  crails scaffold resource -m Article 
BASH
%>

<p>
  This example creates:<br/>
  <ul>
    <li>An <code>ArticleController</code> in <code>app/controllers/article.hpp</code></li>
    <li>An <code>Article</code> model in <code>app/models/article.hpp</code></li>
    <li>Index, show, create and edit views in <code>app/views/article</code></li>
    <li>Routes in <code>app/routes.cpp</code> to match the <code>ArticleController</code> actions.</li>
  </ul>
</p>

<p>
  This is pretty much everything you need to get started with a new resource. Last steps involve
  building the server and running the migration on the database:
</p>

<%= code_block <<BASH
  crails build                        # Builds your server and tasks
  build/tasks/odb_migrate/task -c odb # Creates or update the database schema
  build/server                        # Runs your server
BASH
%>

<p>
  You can now check out your new resources at <a href="http://localhost:3001/article">http://localhost:3001/article</a>
</p>

<div class="hint-box">
  Scaffolding generates views for the formats enabled in your crails application. Meaning that depending
  on your project's settings, the <code>scaffold resource</code> command will generate views for the html
  format, the json format, or both formats.
</div>

<h3>1.2 Scaffolding with extra properties</h3>

<p>
  In the previous example, we haven't defined any properties for our objects. You may add those yourself
  afterwards, but you can also define them directly during scaffolding, using the property option, such as:
</p>

<%= code_block <<BASH
  crails scaffold resource -m Article -p std::string/name std::string/contents std::time_t/date
BASH
%>

<p>
  If you scaffold your resource again like this, you'll notice your views now feature three fields.
  You should already be able to use these simple views to create, edit, list or destroy Article objects.
</p>

<h3>1.3 Generating specific components</h3>

<p>
  You may not always need all the elements that the <code>scaffold resource</code> command provides.
  Which is why you can also create individual components, with more options. A <code>scaffold resource</code>
  basically amounts to running the following commands:
</p>

<%= code_block <<BASH
  crails scaffold controller -m Article
  crails scaffold model -m Article -p std::string/name std::string/contents std::time_t/date
  crails scaffold view -m Article -p std::string/name std::string/contents std::time_t/date
BASH
%>

<p>
  These commands also provide custom options that you can check out using:
</p>

<%= code_block <<BASH
  crails scaffold controller --help
BASH
%>

<h2>2. Advanced scaffolding</h2>
<h3>1.1 Layouts</h3>
<p>
  The scaffolding tool also provides a command to generate HTML layouts. If you are not yet
  comfortable with the notion of layouts, check out the <a href="/tutorials/layouts">Layouts
  and Rendering</a> tutorial.
</p>

<p>
  Here's a command that will generate a default layout for your application:  
</p>

<%= code_block <<BASH
  crails scaffold layout
BASH
%>

<p>
  By default, this will download Bootstrap stylesheets in your <code>app/assets/stylesheets</code> folder,
  and generate a simple layout using this theme. The layout will be generated at
  <code>app/views/layouts/application.html</code>, and you can use it in your application by settings
  the <code>layout</code> shared variable from your controller, such as:
</p>

<%= code_block <<CPP
  vars["layout"] = std::string("layouts/application");
  // or alternatively, at render-time:
  render("article/show", {
    {"layout", std::string("layout/application")}
  });
CPP
%>

<p>
  If you'd rather not use Bootstrap, you can also use the following command to keep things simple:
</p>

<%= code_block <<BASH
  crails scaffold layout --toolkit none
BASH
%>

<h3>1.2 Tasks</h3>
<p>
  Tasks are useful when you want to run processes using your project's code, but outside of a web
  server. Here's how you can quickly create a task:
</p>

<%= code_block <<BASH
  crails scaffold task -n my_task
BASH
%>

<p>
  This will create the <code>tasks/my_task</code> folder, with minimal <code>CMakeLists.txt</code>
  and <code>main.cpp</code> files. The task will be built along with the server and all other
  targets defined in your main <code>CMakeLists.txt</code>. You may then run it as such:
</p>

<%= code_block <<BASH
  build/tasks/my_task/task
BASH
%>

<h3>1.3 Modules</h3>
<p>
  When your project gets bigger and bigger, you might want to compartimentalize your features
  differently. Modules are a good way to achieve that. Each module have their own set of
  <code>assets</code>, <code>controllers</code>, <code>models</code> and <code>views</code>
  folders, along with their own set of routes.
</p>

<p>
  Here's how to scaffold a new module:
</p>

<%= code_block <<BASH
  crails scaffold module -n my_module
BASH
%>

<p>
  This command will create the <code>modules/my_module</code> folder, inculding:
  <ul>
    <li>A <code>CMakeLists.txt</code>file, which defines <code>-DWITH_MODULE_MY_MODULE</code> for the whole project when this module is included in the application build.</li>
    <li>A <code>routes.cpp</code> file, for registering routes specific to the module.</li>
    <li>A <code>module.hpp</code> file.</li>
  </ul>
</p>

<p>
  The <code>app/routes.cpp</code> shall also be modified, so that your module's routes are wired into the
  project when the module is included in the build.
</p>
